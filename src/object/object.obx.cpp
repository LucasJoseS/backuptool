// Code generated by ObjectBox; DO NOT EDIT.

#include "object.obx.hpp"

const obx::Property<Dir, OBXPropertyType_Long> Dir_::id(1);
const obx::RelationProperty<Dir, Dir> Dir_::child_dirs(2);
const obx::RelationProperty<Dir, File> Dir_::child_files(3);

void Dir::_OBX_MetaInfo::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const Dir& object) {
    fbb.Clear();
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.TrackField(4, fbb.PushElement<obx_id>(object.id));
    fbb.TrackField(6, fbb.PushElement<obx_id>(object.child_dirs));
    fbb.TrackField(8, fbb.PushElement<obx_id>(object.child_files));
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

Dir Dir::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t size) {
    Dir object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<Dir> Dir::_OBX_MetaInfo::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<Dir>(new Dir());
    fromFlatBuffer(data, size, *object);
    return object;
}

void Dir::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t, Dir& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<obx_id>(4, 0);
    outObject.child_dirs = table->GetField<obx_id>(6, 0);
    outObject.child_files = table->GetField<obx_id>(8, 0);
    
}

const obx::Property<File, OBXPropertyType_Long> File_::id(1);
const obx::Property<File, OBXPropertyType_String> File_::filename(2);
const obx::Property<File, OBXPropertyType_String> File_::content(3);

void File::_OBX_MetaInfo::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const File& object) {
    fbb.Clear();
    auto offsetfilename = fbb.CreateString(object.filename);
    auto offsetcontent = fbb.CreateString(object.content);
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.TrackField(4, fbb.PushElement<obx_id>(object.id));
    fbb.AddOffset(6, offsetfilename);
    fbb.AddOffset(8, offsetcontent);
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

File File::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t size) {
    File object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<File> File::_OBX_MetaInfo::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<File>(new File());
    fromFlatBuffer(data, size, *object);
    return object;
}

void File::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t, File& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<obx_id>(4, 0);
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(6);
        if (ptr) outObject.filename.assign(ptr->c_str());
    }
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(8);
        if (ptr) outObject.content.assign(ptr->c_str());
    }
    
}

